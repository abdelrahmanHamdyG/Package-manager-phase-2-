name: Node.js CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm test

    # Check if coverage meets the threshold
    - name: Check Coverage
      run: |
        # Ensure the coverage report exists
        if [ ! -f ./coverage/coverage-summary.json ]; then
          echo "Coverage report not found. Ensure tests generate coverage data."
          exit 1
        fi
        
        # Parse the coverage percentage
        coverage=$(cat ./coverage/coverage-summary.json | jq '.total.lines.pct')
        
        # Ensure jq is installed
        if [ -z "$coverage" ]; then
          echo "Failed to parse coverage. Ensure jq is installed and the report is valid."
          exit 1
        fi

        # Check if coverage meets threshold
        if (( $(echo "$coverage < 50" | bc -l) )); then
          echo "Coverage is below 50% ($coverage%). Failing pipeline."
          exit 1
        else
          echo "Coverage is sufficient: $coverage%"
        fi

  deploy:
    runs-on: ubuntu-latest
    needs: unit-tests  # Only run if unit-tests complete successfully

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Sync files to EC2 using rsync
      run: |
        rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/PackRegPh2

    - name: Run deployment script on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ~/PackRegPh2
          # Stop any existing server
          pkill -f "node dist/index.js" || true
          # Install project dependencies
          npm install
          # Compile TypeScript files
          npm run build
          # Start the server in the background
          nohup node dist/index.js > server.log 2>&1 &
        EOF
